<script src="http://cdn.alloyui.com/3.0.1/aui/aui-min.js"></script>
<script src="/js/JSON.prune.js"></script>
<!--<script src="/js/watch-listen-to-object-change.js"></script>-->
<input type="hidden" id="uniAclConfig" value='<?php echo json_encode($this->uniAclConfig); ?>'>
<input type="hidden" id="userAction" value='<?php echo json_encode($this->userAction); ?>'>
<input type="hidden" id="allRoles" value='<?php echo json_encode($this->allRoles); ?>'>

<li id="sampleRoleParentRow" style="display: none;">
    <input type="text" readonly name="role">
    <input type="text" readonly name="parentRole">
    <button class="btn btn-primary" data-container="body" data-toggle="tooltip"
            data-placement="right"><span class="glyphicon glyphicon-cog"></span>
    </button>
</li>
<div id="actionDivSample">
    <span class="glyphicon glyphicon-pencil btnedit"></span>
    <span class="glyphicon glyphicon-plus btnadd"></span>
    <span class="glyphicon glyphicon-trash btndelete"></span>
</div>
<!--<div class="row">-->
<!--    <div class="col-md-8">-->
<!--        <div class="panel-group" id="panelParent">-->
<!--            <div class="panel panel-default">-->
<!--                <div class="panel-heading">-->
<!--                    <div class="panel-title" data-parent="#panelParent" data-toggle="collapse" href="#rolePanelBody">-->
<!--                        role-->
<!--                    </div>-->
<!--                </div>-->
<!--                <div id="rolePanelBody" class="panel-collapse collapse">-->
<!--                    <div class="panel-body">-->
<!--                        <p>hien thi thong tin ve map role parent</p>-->
<!--                        <div id="inheritRoleShow"></div>-->
<!--                    </div>-->
<!--                </div>-->
<!--            </div>-->
<!--            <div class="panel panel-default">-->
<!--                <div class="panel-heading">-->
<!--                    <div class="panel-title" data-parent="#panelParent" data-toggle="collapse" href="#mapPanelBody">map-->
<!--                        role controller action-->
<!--                    </div>-->
<!--                </div>-->
<!--                <div id="mapPanelBody" class="panel-collapse collapse">-->
<!--                    <div class="panel-body">-->
<!--                        <div id="mapRoleWhereShow">-->
<!--                            <div id="selectContainer"></div>-->
<!--                            <div>-->
<!--                                <span class="h3">inherit</span>-->
<!--                                <button class="btn btn-default" id="btnAddControllerAction">add</button>-->
<!--                            </div>-->
<!--                            <div id="mapRoleWhereInherit"></div>-->
<!--                            <div>-->
<!--                                <span class="h3">not inherit</span>-->
<!--                                <button class="btn btn-default" id="btnAddSpecial">add</button>-->
<!--                            </div>-->
<!--                            <div id="mapRoleWhereNotInherit"></div>-->
<!--                            <button id="btnMapRoleWhere" class="btn btn-success">save</button>-->
<!--                        </div>-->
<!--                    </div>-->
<!--                </div>-->
<!--            </div>-->
<!--            <div class="panel panel-default">-->
<!--                <div class="panel-heading">-->
<!--                    <div class="panel-title" data-parent="#panelParent" data-toggle="collapse" href="#allRolePanelBody">-->
<!--                        all roles-->
<!--                    </div>-->
<!--                </div>-->
<!--                <div id="allRolePanelBody" class="panel-collapse collapse">-->
<!--                    <div class="panel-body">-->
<!--                        <p>hien thi tat cac role</p>-->
<!--                        <div id="allRolesShow"></div>-->
<!--                    </div>-->
<!--                </div>-->
<!--            </div>-->
<!--            <div class="panel panel-default">-->
<!--                <div class="panel-heading">-->
<!--                    <div class="panel-title" data-parent="#panelParent" data-toggle="collapse"-->
<!--                         href="#controllerActionPanelBody">controller-->
<!--                        action-->
<!--                    </div>-->
<!--                </div>-->
<!--                <div id="controllerActionPanelBody" class="panel-collapse collapse">-->
<!--                    <div class="panel-body">-->
<!--                        <p>hien thi tat cac controller action</p>-->
<!--                        <div id="allControllerActionShow"></div>-->
<!--                        <div id="save"></div>-->
<!--                    </div>-->
<!--                </div>-->
<!--            </div>-->
<!--        </div>-->
<!--    </div>-->
<!--</div>-->
<div class="modal fade" tabindex="-1" role="dialog" id="modalControllerAction">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span
                        aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">all controller action</h4>
            </div>
            <div class="modal-body">
                <div id="modalBodyControllerAction"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="btnSaveModalControllerAction">Save changes</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->
<div id="mapRoleParent">
    <h3>mapRoleParent</h3>
</div>
<div>
    <div>
        <div id="roleSelectPicker">
            <h3>roleSelectPicker</h3>
        </div>
        <div>
            <span class="h3">mapRoleControllerAction</span>
            <span class="btn btn-default btnadd" data-toggle="modal" data-target="#modalControllerAction"
                  id="btnAddControllerAction">add
            </span>
        </div>

        <div id="mapRoleControllerAction"></div>
        <div>
            <span class="h3">mapRoleSpecial</span>
            <span class="btn btn-default btnadd" data-toggle="modal" data-target="#modalControllerAction"
                  id="btnAddSpecial">add</span>
        </div>
        <div id="mapRoleSpecial"></div>

    </div>
    <button class="btn btn-default btnedit" id="btnSaveMapRoleWhere">save</button>
</div><!--map role where-->
<div id="allRoles_1">
    <h3>allRoles</h3>
</div>
<div>
    <h3>allControllerAction</h3>
    <div id="allControllerAction"></div>
    <button class="btn btn-default btnedit" id="btnRebuildControllerAction">rebuild</button>
</div><!--all controller action-->
<script>
    (function(){
        $(document).ready(function(){
            window.AdminRoleView = function(idCollection){
                this.id = idCollection;
//                console.log($("#" + this.id.data.userAction).val());
                this.userAction = JSON.parse($("#" + this.id.data.userAction).val());
                this.allRoles = JSON.parse($("#" + this.id.data.allRoles).val());
                this.uniAclConfig = JSON.parse($("#" + this.id.data.uniAclConfig).val());
            };
            AdminRoleView.prototype = {
                MAP_ROLE_PARENT: "MAP_ROLE_PARENT",
                CONTROLLER_ACTION: "CONTROLLER_ACTION",
                ROLE: "ROLE",
                INHERIT: "INHERIT",
                NOT_INHERIT: "NOT_INHERIT",
                MAP_ROLE_CONTROLLER_ACTION: "MAP_ROLE_CONTROLLER_ACTION",
                MAP_ROLE_SPECIAL: "MAP_ROLE_SPECIAL",


                render: function(){
                    console.log(this.uniAclConfig);
                    this.renderMapRoleParent(this.uniAclConfig[this.MAP_ROLE_PARENT],
                        this.id.render.sampleRoleParentRow, this.id.render.actionDivSample,
                        this.id.render.mapRoleParent);
//                    this.renderBtnForUserAction(this.id.render.actionDivSample, this.id.render.userAction);
                    /**
                     * render role controller action on selected
                     */
                    this.renderAllRoles(this.allRoles, this.id.render.roleSelectPicker);
                    var ad = this;
                    $("#" + this.id.render.roleSelectPicker).on("change", function(){
                        var roleSelected = $(this).find("option:checked").val();
                        ad.renderTreeView(ad.uniAclConfig[ad.MAP_ROLE_CONTROLLER_ACTION][roleSelected],
                            {checked: true},
                            ad.id.render.mapRoleControllerAction);

                        ad.renderTreeView(ad.uniAclConfig[ad.MAP_ROLE_SPECIAL][roleSelected], {checked: true},
                            ad.id.render.mapRoleSpecial);
                    });

                    this.renderAllRoles(this.allRoles, this.id.render.allRoles);

                    this.renderTreeView(this.uniAclConfig[this.CONTROLLER_ACTION], {checked: false},
                        this.id.render.allControllerAction);

                    this.renderTreeView(this.uniAclConfig[this.CONTROLLER_ACTION], {checked: false},
                        this.id.render.modalBodyControllerAction);

                    this.renderUserAction();
                },

                bindEventHandler: function(){
                    var ad = this;
                    $("#" + ad.id.event.btnSaveMapRoleWhere).on("click", function(){
                        var result = ad.buildObjectToSend(ad.id.render.roleSelectPicker,
                            ad.id.render.mapRoleControllerAction,
                            ad.id.render.mapRoleSpecial);
                        ad.ajaxCall(result, "deny");
                    });

                    /**
                     * how to composit 3 listener come together
                     */
                    var where = {controllerAction: "", special: ""};
                    //1
                    $("#" + ad.id.event.btnSaveModalControllerAction).on("click", function(){
                        $("#" + ad.id.render.modalControllerAction).modal("hide");
                        var result = ad.buildObjectToSend(ad.id.render.roleSelectPicker, where.controllerAction,
                            where.special);
                        ad.ajaxCall(result, "allow");
                    });
                    //2
                    $("#" + ad.id.event.btnAddControllerAction).on("click", function(){
                        where.controllerAction = ad.id.render.modalBodyControllerAction;
                        where.special = "";
                        console.log(where);
                    });
                    //3
                    $("#" + ad.id.event.btnAddSpecial).on("click", function(){
                        where.controllerAction = "";
                        where.special = ad.id.render.modalBodyControllerAction;
                        console.log(where);
                    });

                    $("#" + ad.id.event.btnRebuildControllerAction).on("click", function(){
                        var result = {};
                        ad.ajaxCall(result, "rebuildControllerAction");
                    });
                },

                renderMapRoleParent: function(data, sampleRoleParentRowId, divIdActionDivSample, divId){
//                    console.log(data);
                    var ad = this;
                    var sampleRoleRow = $("#" + sampleRoleParentRowId);
                    var containerDiv = $("#" + divId);
                    for(var role in data){
                        if(data.hasOwnProperty(role)){
                            var row = sampleRoleRow.clone();
                            row.css({display: 'block'});
                            row.find("input[name='role']").val(role);
                            row.find("input[name='parentRole']").val(data[role]);
                            row.find("button").addClass(ad.id.render.userAction);
//                            console.log(row);
                            containerDiv.append(row);
                        }
                    }
                    //bind tooltip for each span "gly cog"
                    var actionDivSample = $("#" + divIdActionDivSample);
//                    var actionDiv = actionDivSample.clone();
//                    actionDiv.css({display: 'inline'});
                    $("." + ad.id.render.userAction).tooltip({
                        html: true,
                        title: actionDivSample
                    });
                },

                renderTreeView: function(data, checkedOption, divId){
                    var treeData = this.buildTreeData(data, checkedOption);
                    $("#" + divId).empty();
                    YUI().use('aui-tree-view', function(Y){
                            new Y.TreeView({boundingBox: "#" + divId, children: treeData}).render();
                        }
                    );
                },

                renderAllRoles: function(data, divId){
                    //            <select class="selectpicker">
                    //                <option>Mustard</option>
                    //                <option>Ketchup</option>
                    //                <option>Relish</option>
                    //            </select>
                    var select = $('<select class="selectpicker">');
                    var optionBlank = $('<option selected disabled hidden style="display: none" value=""></option>');
                    select.append(optionBlank);
                    var optionSample = $("<option>");
                    for(var key in data){
                        if(data.hasOwnProperty(key)){
                            var option = optionSample.clone();
                            option.html(data[key]);
                            select.append(option);
                        }
                    }
                    $("#" + divId).append(select);
                },

                renderUserAction: function(){
                    $(".btnadd").css({display: 'none'});
                    $(".btnedit").css({display: 'none'});
                    $(".btndelete").css({display: 'none'});

                    for(var key in this.userAction){
                        if(this.userAction.hasOwnProperty(key)){
                            $(".btn" + this.userAction[key]).css({display: 'inline'});
                        }
                    }
                },

                buildTreeData: function(data, checkedOption){
                    var treeData = [];
                    for(var controller in data){
                        if(data.hasOwnProperty(controller)){
                            var actionData = [];
                            //build each controller as node
                            treeData.push({
                                children: actionData,
                                expanded: true,
                                label: controller,
                                type: 'task',
                                checked: checkedOption.checked
                            });

                            //build actionData, into controller as child-node
                            var actionArray = data[controller];
                            for(var key in actionArray){
                                if(actionArray.hasOwnProperty(key)){
                                    actionData.push({
                                        label: actionArray[key],
                                        leaf: true,
                                        type: 'task',
                                        checked: checkedOption.checked
                                    })
                                }
                            }
                        }
                    }
                    return treeData;
                },

                getTreeData: function(ul, store){
                    var liArray = ul.children("li");
                    /** @warn for each not work as expected of recursive*/
                    for(var i = 0; i < liArray.length; i++){
                        var li = $(liArray[i]);
                        var contentDiv = li.children("div");
                        var containerUl = li.children("ul");
                        if(contentDiv.hasClass("tree-node-checked")){
                            var label = contentDiv.children(".tree-label").html();
                            /** @warn handle different on controller|action */
                            if(containerUl.children("li").length > 0){
                                store[label] = [];
                                this.getTreeData(containerUl, store[label]);
                            }else{
                                store.push(label);
                            }
                        }
                    }
                },

                buildObjectToSend: function(divIdRoleSelectPicker, divIdMapRoleCA, divIdMapRoleSpecial){
                    var result = {};
                    var mapRoleControllerAction = {};
                    if(divIdMapRoleCA){
                        this.getTreeData($("#" + divIdMapRoleCA).children("ul"), mapRoleControllerAction);
                    }
                    var mapRoleSpecial = {};
                    if(divIdMapRoleCA){
                        this.getTreeData($("#" + divIdMapRoleSpecial).children("ul"), mapRoleSpecial);
                    }
                    var selectDiv = $("#" + divIdRoleSelectPicker).find("select");
                    /** explicit try on first child */
                    if(selectDiv.length > 0){
                        selectDiv = $(selectDiv[0]);
                    }
                    result["role"] = selectDiv.find("option:selected").val();
                    result["inherit"] = mapRoleControllerAction;
                    result["notInherit"] = mapRoleSpecial;
                    return result;
                },

                ajaxCall: function(result, action){
                    var ad = this;
                    var resultJsonString = JSON.stringify(result);
//                    console.log(result);
                    console.log(resultJsonString);
                    var formData = new FormData();
                    formData.append("userAction", action);
                    formData.append("data", resultJsonString);
                    var oReq = new XMLHttpRequest();
                    var url = "/admin/role/edit";
                    oReq.open("post", url);
                    oReq.send(formData);
                    oReq.onload = function(){
                        var res = oReq.response;
//                        console.log(res);
                        var resJsonObj = JSON.parse(res);
                        console.log(resJsonObj);
                        ad.uniAclConfig = resJsonObj["info"];
//                        ad.render();
                    };
                }
            };
            var idCollection = {
                data: {
                    userAction: "userAction",
                    allRoles: "allRoles",
                    uniAclConfig: "uniAclConfig"
                },
                render: {
                    mapRoleParent: "mapRoleParent",
                    roleSelectPicker: "roleSelectPicker",
                    mapRoleControllerAction: "mapRoleControllerAction",
                    mapRoleSpecial: "mapRoleSpecial",
                    allRoles: "allRoles_1",
                    allControllerAction: "allControllerAction",
                    modalControllerAction: "modalControllerAction",
                    modalBodyControllerAction: "modalBodyControllerAction",
                    userAction: "userAction",
                    sampleRoleParentRow: "sampleRoleParentRow",
                    actionDivSample: "actionDivSample"
                },
                event: {
                    btnSaveMapRoleWhere: "btnSaveMapRoleWhere",
                    btnAddControllerAction: "btnAddControllerAction",
                    btnAddSpecial: "btnAddSpecial",
                    btnSaveModalControllerAction: "btnSaveModalControllerAction",
                    btnRebuildControllerAction: "btnRebuildControllerAction"
                }
            };
            var adminRoleView = new AdminRoleView(idCollection);
            adminRoleView.render();
            adminRoleView.bindEventHandler();
        });
    })(jQuery);
</script>


